from datetime import datetime
from typing import Optional
import uuid
from app.domain.location import Location
from app.domain.todo import Todo
from app.exceptions.todo_creation_error import TodoCreationError
from app.repositories.todo_repository import TodoRepository


class CreateTodoService:
    def __init__(self, todo_repo: TodoRepository):
        self.todo_repo: TodoRepository = todo_repo

    def run(self, task: str, due_date: Optional[datetime] = None, location: Optional[Location] = None) -> Todo:
        if not task.strip():
            raise ValueError('task cannot be empty')
        
        if due_date and due_date < datetime.now():
            raise ValueError('due date cannot be in the past')

        todo_id = uuid.uuid4()

        todo: Todo = Todo(
            id=todo_id,
            task=task,
            created_at=datetime.now(),
            completed=False,
            location_id=None, # id gets generated by db
            location=location,
            due_date=due_date,
            updated_at=None,
        )

        try:
            self.todo_repo.create_todo(todo)
        except Exception as e:
            print(f'todo creation failed for {task}: {e}')
            raise TodoCreationError(task, e)

        try: 
            return self.todo_repo.get_todo(todo_id)
        except Exception as e:
            print(f'todo \'{task}\' was created but could not be retrieved: {e}')
            raise TodoCreationError(task, e)

